import math

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 9)

def check_winner(board):
    for row in board:  
        if row[0] == row[1] == row[2] and row[0] != " ":
            return row[0]
    for col in range(3):  
        if board[0][col] == board[1][col] == board[2][col] and board[0][col] != " ":
            return board[0][col]
    if board[0][0] == board[1][1] == board[2][2] and board[0][0] != " ":  
        return board[0][0]
    if board[0][2] == board[1][1] == board[2][0] and board[0][2] != " ":  
        return board[0][2]
    return None

def is_draw(board):
    for row in board:
        if " " in row:
            return False
    return True

def minimax(board, depth, is_maximizing, alpha=None, beta=None):
    winner = check_winner(board)
    if winner == "O":
        return 1
    if winner == "X":
        return -1
    if is_draw(board):
        return 0

    if is_maximizing:
        max_eval = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == " ":
                    board[i][j] = "O"
                    eval = minimax(board, depth + 1, False, alpha, beta)
                    board[i][j] = " "
                    max_eval = max(max_eval, eval)
                    if alpha is not None and beta is not None:
                        alpha = max(alpha, eval)
                        if beta <= alpha:
                            return max_eval
        return max_eval
    else:
        min_eval = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == " ":
                    board[i][j] = "X"
                    eval = minimax(board, depth + 1, True, alpha, beta)
                    board[i][j] = " "
                    min_eval = min(min_eval, eval)
                    if alpha is not None and beta is not None:
                        beta = min(beta, eval)
                        if beta <= alpha:
                            return min_eval
        return min_eval

def best_move(board):
    best_score = -math.inf
    move = None
    for i in range(3):
        for j in range(3):
            if board[i][j] == " ":
                board[i][j] = "O"
                score = minimax(board, 0, False, -math.inf, math.inf)
                board[i][j] = " "
                if score > best_score:
                    best_score = score
                    move = (i, j)
    return move

def tic_tac_toe():
    board = [[" " for _ in range(3)] for _ in range(3)]
    print("Welcome to Tic-Tac-Toe!")
    print_board(board)
    while True:
        move = input("Enter your move (row and column, e.g., 1 2): ")
        try:
            row, col = map(int, move.split())
            if board[row][col] != " ":
                print("Invalid move. Try again.")
                continue
        except (ValueError, IndexError):
            print("Invalid input. Try again.")
            continue
        board[row][col] = "X"
        print_board(board)

        if check_winner(board):
            print("Congratulations! You win!")
            break
        if is_draw(board):
            print("It's a draw!")
            break

        print("AI is making a move...")
        ai_move = best_move(board)
        if ai_move:
            board[ai_move[0]][ai_move[1]] = "O"
        print_board(board)

        if check_winner(board):
            print("AI wins! Better luck next time.")
            break
        if is_draw(board):
            print("It's a draw!")
            break

if __name__ == "__main__":
    tic_tac_toe()
